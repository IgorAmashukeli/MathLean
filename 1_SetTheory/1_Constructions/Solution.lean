import ¬´Header¬ª


theorem Russel_paradox : ¬¨ ‚àÉ A, ‚àÄ x, (x ‚àà A ‚Üî x ‚àâ x) :=
  fun (h : ‚àÉ A, ‚àÄ x, (x ‚àà A ‚Üî x ‚àâ x)) =>
    Exists.elim h
    (
      fun (Russel) =>
        fun (hw : ‚àÄ x, (x ‚àà Russel ‚Üî x ‚àâ x)) =>
          (negation_not_equiv (Russel ‚àà Russel)) (hw Russel)
    )

def comprehension_axiom := ‚àÄ P : Set ‚Üí Prop, ‚àÉ A, ‚àÄ x, (x ‚àà A ‚Üî P x)
theorem comprehension_axiom_is_wrong : ¬¨(comprehension_axiom) :=
  fun (hcomp) =>
    let badP := fun (x) => x ‚àâ x
    Russel_paradox (
      hcomp badP
    )




theorem subset_refl : ‚àÄ A, A ‚äÜ A :=
  fun (A : Set) => fun x => fun (h : x ‚àà A) => h

theorem subset_trans : ‚àÄ A B C, A ‚äÜ B ‚Üí B ‚äÜ C ‚Üí A ‚äÜ C :=
  fun (A B C : Set) => fun (h : A ‚äÜ B) => fun (g : B ‚äÜ C) =>
    fun x => fun (h‚ÇÅ : x ‚àà A) => (g x) (h x h‚ÇÅ)




theorem empty_subset_any : ‚àÄ A B, empty A ‚Üí A ‚äÜ B :=
  fun (A B : Set) => fun (h : empty A) => fun x => fun (g : x ‚àà A) =>
    (False.elim : False ‚Üí x ‚àà B) (h x g)



theorem subs_subs_eq : ‚àÄ A B, A ‚äÜ B ‚àß B ‚äÜ A ‚Üî A = B :=
  fun (A B : Set) =>
    Iff.intro
    (
      fun (h : A ‚äÜ B ‚àß B ‚äÜ A) =>
        extensionality A B (fun x =>
          Iff.intro
          (
            fun (g : x ‚àà A) => (And.left h) x g
          )
          (
            fun (g : x ‚àà B) => (And.right h) x g
          )
        )
    )
    (
      fun (h : A = B) =>
        And.intro
        (
          fun x =>
            fun (g : x ‚àà A) =>
              Eq.subst h g
        )
        (
          fun x =>
            fun (g : x ‚àà B) =>
              -- Eq.substr was proved in the previous problem
              Eq.substr h g
        )
    )


theorem equality_then_subset : ‚àÄ A B, A = B ‚Üí A ‚äÜ B :=
  fun (A B) => fun (h : A = B) =>
    eq_subst (fun (u) => A ‚äÜ u) A B (h) (subset_refl A)


theorem exists_empty : (‚àÉ x, empty x) :=
  Exists.elim infinity
  (
    fun (inf : Set) =>
      fun (h_inf : (‚àÉ b, empty b ‚àß b ‚àà inf) ‚àß (‚àÄ x ‚àà inf; ‚àÄ y, is_successor x y ‚Üí y ‚àà inf)) =>
        Exists.elim (And.left h_inf)
        (
          fun (empt : Set) =>
            fun (h_empt : empty empt ‚àß empt ‚àà inf) =>
              Exists.intro empt (And.left h_empt)
        )
  )


theorem exists_unique_empty : (‚àÉ! x, empty x) :=

  Exists.elim exists_empty
  (
    fun (empt : Set) =>
      fun (h_empt : empty empt) =>
        Exists.intro empt (And.intro (h_empt) (
          fun (y : Set) => fun (h_y : empty y) =>
            Iff.mp (subs_subs_eq empt y)
            (And.intro
            (empty_subset_any empt y h_empt)
            (empty_subset_any y empt h_y))

        ))
  )



noncomputable def empty_set := set_intro empty exists_unique_empty

notation (priority := high) "‚àÖ" => empty_set

theorem empty_set_is_empty : empty ‚àÖ := And.left (set_intro_prop empty exists_unique_empty)

theorem empty_set_subset_any : ‚àÄ A, ‚àÖ ‚äÜ A :=
  fun (_ : Set) => fun (x : Set) => fun (h : x ‚àà ‚àÖ) => False.elim ((empty_set_is_empty x) h)


theorem unique_boolean : (‚àÄ A, ‚àÉ! B, ‚àÄ x, (x ‚àà B ‚Üî x ‚äÜ A)) :=
  fun (A : Set) =>
    Exists.elim (boolean A)
    (
      fun (w : Set) =>
        fun (hw : ‚àÄ x, (x ‚àà w ‚Üî x ‚äÜ A)) =>
          Exists.intro w (And.intro hw (fun (Y : Set) =>
            fun (hy : ‚àÄ x, (x ‚àà Y ‚Üî x ‚äÜ A)) =>
              extensionality w Y (fun (x) => iff_trans_symm (x ‚àà w) (x ‚äÜ A) (x ‚àà Y) (hw x) (hy x))
          ))
    )


theorem non_empty_uni_then_exi (P : Set ‚Üí Prop) : ‚àÄ A, (A ‚â† ‚àÖ) ‚Üí (‚àÄ x ‚àà A; P x) ‚Üí ‚àÉ x ‚àà A; P x :=
  fun (A) => fun (h : A ‚â† ‚àÖ) =>
    fun (g : ‚àÄ x ‚àà A; P x) =>
      Classical.byContradiction
      fun (s : ¬¨‚àÉ x ‚àà A; P x) =>
        let first := Iff.mpr (morgan_uni Set (fun (x) => x ‚àà A ‚àß P x)) s
        let third : ‚àÄ (x), (x ‚àà A) ‚Üí P x := g
        let fourth : empty A := fun (x) => fun (s : x ‚àà A) => first x (And.intro (s) (third x s))

        h (
          extensionality A ‚àÖ
          fun (x) =>
          Iff.intro
          (
            fun (s : x ‚àà A) => (False.elim : False ‚Üí x ‚àà ‚àÖ) (fourth x s)
          )
          (
            fun (s : x ‚àà ‚àÖ) => (False.elim : False ‚Üí x ‚àà A) ((empty_set_is_empty x) s)
          )
        )


theorem set_empty_iff_empty : ‚àÄ A, (A = ‚àÖ) ‚Üî (‚àÄ x, x ‚àâ A) :=
  fun (A) =>
    Iff.intro
    (
      fun (hA : (A = ‚àÖ)) =>
        fun (x) =>
          fun (hx : (x ‚àà A)) =>
            empty_set_is_empty x (
              eq_subst (fun (t) => x ‚àà t) (A) (‚àÖ) hA hx
            )
    )
    (
      fun (hA : (‚àÄ x, x ‚àâ A)) =>
        Iff.mp (subs_subs_eq A ‚àÖ) (
          And.intro (
            fun (y) =>
              fun (hy : y ‚àà A) =>
                False.elim (
                  hA y hy
                )
          ) (empty_set_subset_any A)
        )
    )


theorem set_non_empty_iff_non_empty : ‚àÄ A, (A ‚â† ‚àÖ) ‚Üî ‚àÉ x, x ‚àà A :=
  fun (A) =>
    Iff.intro
    (
      fun (h : A ‚â† ‚àÖ) =>
      Exists.elim (non_empty_uni_then_exi (fun (_) => True) A h (fun (x) => fun (_ : x ‚àà A) => True.intro)) (
        fun (s) =>
          fun (hs : s ‚àà A ‚àß True) =>
            Exists.intro s (And.left hs)
      )
    )
    (
      fun (hA : (‚àÉ x, x ‚àà A)) =>
        fun (hAemp : (A = ‚àÖ)) =>
          Exists.elim hA (
            fun (x) =>
              fun (hx : x ‚àà A) =>
                empty_set_is_empty x (
                  eq_subst (fun (t) => x ‚àà t) (A) (‚àÖ) (hAemp) (hx)
                )
          )
    )





noncomputable def boolean_func_sym : Set ‚Üí Set :=
  fun (A : Set) => set_intro (fun (B : Set) => ‚àÄ x, (x ‚àà B ‚Üî x ‚äÜ A)) (unique_boolean A)


notation (priority := high) "ùí´" => boolean_func_sym




theorem boolean_set_is_boolean : ‚àÄ A, (‚àÄ x, x ‚àà ùí´ A ‚Üî x ‚äÜ A) :=
  fun (A : Set) => And.left (set_intro_prop (fun (B : Set) => ‚àÄ x, (x ‚àà B ‚Üî x ‚äÜ A)) (unique_boolean A))



theorem empty_elem_boolean : ‚àÄ A, ‚àÖ ‚àà ùí´ A :=
  fun (A : Set) =>
    Iff.mpr (boolean_set_is_boolean A ‚àÖ) (empty_set_subset_any A)


theorem boolean_set_not_empty : ‚àÄ A, ùí´ A ‚â† ‚àÖ :=
  fun (A : Set) =>
    fun (g : ùí´ A = ‚àÖ) =>
      (Eq.substr g empty_set_is_empty : empty (ùí´ A)) ‚àÖ (empty_elem_boolean A)


theorem unique_replacement (P : Set ‚Üí Set ‚Üí Prop) : ‚àÄ A, functional_predicate A P ‚Üí ‚àÉ! B, ‚àÄ y, (y ‚àà B ‚Üî ‚àÉ x ‚àà A; P x y) :=
    fun (A) => fun (s : functional_predicate A P) =>
      let first := replacement P A s
      Exists.elim first
      (
        fun (w) => fun (hw : ‚àÄ (y : Set), y ‚àà w ‚Üî ‚àÉ x ‚àà A; P x y) =>
          Exists.intro w (And.intro hw (
            fun (u) => fun (hu : ‚àÄ (y : Set), y ‚àà u ‚Üî ‚àÉ x ‚àà A; P x y) =>
              extensionality w u (fun (t) => iff_trans_symm (t ‚àà w) (‚àÉ x ‚àà A; P x t) (t ‚àà u) (hw t) (hu t))
              )
          )
      )


noncomputable def replacement_set (P : Set ‚Üí Set ‚Üí Prop) (A : Set) (h : functional_predicate A P) : Set :=
  set_intro (fun (B) => ‚àÄ y, (y ‚àà B ‚Üî ‚àÉ x ‚àà A; P x y)) (unique_replacement P A h)



syntax "RepImg" "["  term ";"  term ";" term "]"  : term



macro_rules
  | `(RepImg [ $P:term ; $A:term ; $fun_rel_proof:term ])  => `(replacement_set $P $A $fun_rel_proof)



theorem replacement_set_is_replacement (p : Set ‚Üí Set ‚Üí Prop) (A : Set) (h : functional_predicate A P) :
  ‚àÄ y, (y ‚àà RepImg [P; A; h]) ‚Üî ‚àÉ x ‚àà A; P x y :=
    And.left (set_intro_prop (fun (B) => ‚àÄ y, y ‚àà B ‚Üî ‚àÉ x ‚àà A; P x y) (unique_replacement P A h))




def functional_predicate_picker (a‚ÇÅ : Set) (a‚ÇÇ : Set) : Set ‚Üí Set ‚Üí Prop :=
  fun (b : Set) => fun (c : Set) => (b = ‚àÖ ‚Üí c = a‚ÇÅ) ‚àß (b ‚â† ‚àÖ ‚Üí c = a‚ÇÇ)


noncomputable def Pow_Pow_empty : Set := ùí´ (ùí´ ‚àÖ)




theorem functional_func_pred_pick (a‚ÇÅ : Set) (a‚ÇÇ : Set) : functional_predicate Pow_Pow_empty (functional_predicate_picker a‚ÇÅ a‚ÇÇ) :=
    fun (x) =>
      fun (_ : x ‚àà ùí´ (ùí´ ‚àÖ)) =>
        Or.elim (Classical.em (x = ‚àÖ))
        (
          fun (h : x = ‚àÖ) =>
            Exists.intro a‚ÇÅ (And.intro
            (
              And.intro (fun (_ : x = ‚àÖ) => Eq.refl a‚ÇÅ) (fun (g : x ‚â† ‚àÖ) => (False.elim : False ‚Üí (a‚ÇÅ = a‚ÇÇ)) (g h))
            )
            (
              fun (y : Set) =>
                fun (hy : (x = ‚àÖ ‚Üí y = a‚ÇÅ) ‚àß (x ‚â† ‚àÖ ‚Üí y = a‚ÇÇ)) =>
                  -- Eq.symm was proved in the previous task
                  Eq.symm ((And.left hy) h)
            )
            )
        )
        (
          fun (h : x ‚â† ‚àÖ) =>
            Exists.intro a‚ÇÇ (And.intro
            (
              And.intro (fun (g : x = ‚àÖ) => (False.elim : False ‚Üí (a‚ÇÇ = a‚ÇÅ)) (h g)) (fun (_ : x ‚â† ‚àÖ) => Eq.refl a‚ÇÇ)
            )
            (
              fun (y : Set) =>
                fun (hy : (x = ‚àÖ ‚Üí y = a‚ÇÅ) ‚àß (x ‚â† ‚àÖ ‚Üí y = a‚ÇÇ)) =>
                  Eq.symm ((And.right hy) h)
            ))
        )


theorem exists_unordered_pair : ‚àÄ a‚ÇÅ a‚ÇÇ, ‚àÉ C, ‚àÄ x, (x ‚àà C ‚Üî x = a‚ÇÅ ‚à® x = a‚ÇÇ) :=
  fun (a‚ÇÅ) => fun (a‚ÇÇ) =>
    let exists_st := replacement (functional_predicate_picker a‚ÇÅ a‚ÇÇ) Pow_Pow_empty (functional_func_pred_pick a‚ÇÅ a‚ÇÇ)

    Exists.elim exists_st

    (
      fun (w) =>
        fun (hw : ‚àÄ (y : Set), y ‚àà w ‚Üî ‚àÉ x ‚àà Pow_Pow_empty; (x = ‚àÖ ‚Üí y = a‚ÇÅ) ‚àß (x ‚â† ‚àÖ ‚Üí y = a‚ÇÇ)) =>
          Exists.intro w
          (
            fun (y) =>
              Iff.intro
              (
                fun (g : y ‚àà w) =>
                  let first := Iff.mp (hw y) g
                  Exists.elim first
                  (
                    fun (w) => fun (hw : (w ‚àà Pow_Pow_empty) ‚àß ((w = ‚àÖ ‚Üí y = a‚ÇÅ) ‚àß (w ‚â† ‚àÖ ‚Üí y = a‚ÇÇ))) =>
                      Or.elim (Classical.em (w = ‚àÖ))
                      (
                        fun (h‚ÇÅ : w = ‚àÖ) =>
                        (Or.inl : y = a‚ÇÅ ‚Üí (y = a‚ÇÅ ‚à® y = a‚ÇÇ))
                        ((And.left (And.right hw)) h‚ÇÅ)
                      )
                      (
                        fun (h‚ÇÇ : w ‚â† ‚àÖ) =>
                        (Or.inr : y = a‚ÇÇ ‚Üí (y = a‚ÇÅ ‚à® y = a‚ÇÇ))
                        ((And.right (And.right hw)) h‚ÇÇ)
                      )
                  )

              )
              (
                fun (g : y = a‚ÇÅ ‚à® y = a‚ÇÇ) =>
                  Or.elim g
                  (
                    fun (g‚ÇÅ : y = a‚ÇÅ) =>
                      let first := Iff.mpr (hw y)

                      let second := (
                        And.intro (
                          fun (_ :‚àÖ = ‚àÖ) => g‚ÇÅ
                        )
                        (
                          fun (s : ‚àÖ ‚â† ‚àÖ) =>
                            (False.elim : False ‚Üí y = a‚ÇÇ) (s (Eq.refl ‚àÖ))
                        )
                      )

                      let third := empty_elem_boolean (ùí´ ‚àÖ)

                      let fourth : ‚àÉ x ‚àà Pow_Pow_empty; ((x = ‚àÖ ‚Üí y = a‚ÇÅ) ‚àß (x ‚â† ‚àÖ ‚Üí y = a‚ÇÇ)) := Exists.intro ‚àÖ (And.intro third second)

                      let fifth := first fourth

                      fifth

                  )
                  (
                    fun (g‚ÇÇ : y = a‚ÇÇ) =>
                      let first := Iff.mpr (hw y)

                      let second := ùí´ ‚àÖ

                      let third : ((ùí´ ‚àÖ = ‚àÖ) ‚Üí (y = a‚ÇÅ)) ‚àß ((ùí´ ‚àÖ ‚â† ‚àÖ) ‚Üí ( y = a‚ÇÇ)) := (
                        And.intro
                        (fun (s : second = ‚àÖ) =>
                          (False.elim : (False ‚Üí y = a‚ÇÅ) ) ((boolean_set_not_empty ‚àÖ) s)
                        )
                        (
                          fun (_ : second ‚â† ‚àÖ) =>
                            g‚ÇÇ
                        )
                      )

                      let fourth := subset_refl (ùí´ ‚àÖ)

                      let fifth := Iff.mpr (boolean_set_is_boolean (ùí´ ‚àÖ) (ùí´ ‚àÖ))

                      let sixth : (ùí´ ‚àÖ) ‚àà Pow_Pow_empty := fifth fourth

                      let seventh : ‚àÉ x ‚àà Pow_Pow_empty; ((x = ‚àÖ ‚Üí y = a‚ÇÅ) ‚àß (x ‚â† ‚àÖ ‚Üí y = a‚ÇÇ)) := Exists.intro (ùí´ ‚àÖ) (And.intro sixth third)

                      let eighth := first seventh
                      eighth
                  )
              )
          )
    )



theorem unique_unordered_pair : (‚àÄ a‚ÇÅ a‚ÇÇ, ‚àÉ! C, ‚àÄ x, (x ‚àà C ‚Üî x = a‚ÇÅ ‚à® x = a‚ÇÇ)) :=
  fun (a‚ÇÅ) => fun (a‚ÇÇ) =>
    Exists.elim (exists_unordered_pair a‚ÇÅ a‚ÇÇ)
    (
      fun (w) =>
        fun (hw : ‚àÄ x, (x ‚àà w ‚Üî x = a‚ÇÅ ‚à® x = a‚ÇÇ)) =>
          Exists.intro w (And.intro hw (fun (y) => fun (hy : ‚àÄ x, (x ‚àà y ‚Üî x = a‚ÇÅ ‚à® x = a‚ÇÇ)) =>

            (extensionality w y) (fun (x) => iff_trans_symm (x ‚àà w) (x = a‚ÇÅ ‚à® x = a‚ÇÇ) (x ‚àà y) (hw x) (hy x))

          ))
    )




noncomputable def unordered_pair_set : (Set ‚Üí Set ‚Üí Set) := fun (a‚ÇÅ : Set) => fun (a‚ÇÇ : Set) =>
  set_intro (fun (B) => ‚àÄ x, (x ‚àà B ‚Üî x = a‚ÇÅ ‚à® x = a‚ÇÇ)) (unique_unordered_pair a‚ÇÅ a‚ÇÇ)


notation (priority := high) "{" a‚ÇÅ ", " a‚ÇÇ "}" => unordered_pair_set a‚ÇÅ a‚ÇÇ


theorem unordered_pair_set_is_unordered_pair : ‚àÄ a‚ÇÅ a‚ÇÇ x, x ‚àà {a‚ÇÅ, a‚ÇÇ} ‚Üî x = a‚ÇÅ ‚à® x = a‚ÇÇ :=
  fun (a‚ÇÅ) => fun (a‚ÇÇ) =>

    And.left (set_intro_prop (fun (B) => ‚àÄ x, (x ‚àà B ‚Üî x = a‚ÇÅ ‚à® x = a‚ÇÇ)) (unique_unordered_pair a‚ÇÅ a‚ÇÇ))


noncomputable def singleton_set : (Set ‚Üí Set) := fun (a) => unordered_pair_set a a

notation (priority := high) "{" a "}" => singleton_set a



theorem singleton_a_elem_is_a : ‚àÄ a x, x ‚àà {a} ‚Üî x = a :=
  fun (a) =>
    fun (x) =>
      Iff.intro
      (
        fun (h : x ‚àà {a}) =>
          let first := Iff.mp (unordered_pair_set_is_unordered_pair a a x)
          let second := first h
          let third := Iff.mp (disj_idemp (x = a))
          let fourth := third second

          fourth
      )
      (
        fun (h : x = a) =>
          let third := Iff.mpr (disj_idemp (x = a))
          let fourth := third h
          let first := Iff.mpr (unordered_pair_set_is_unordered_pair a a x)

          first fourth

      )


theorem x_in_singl_x : ‚àÄ x, x ‚àà {x} :=
  fun (x) => Iff.mpr (singleton_a_elem_is_a x x) (Eq.refl x)

theorem singleton_non_empty : ‚àÄ x, non_empty {x} :=
  fun (x) => Exists.intro x (x_in_singl_x x)



theorem neg_notin_refl : ‚àÄ x, x ‚àâ x :=
  fun (x) =>
  let first := { x }
  let second := regularity first (singleton_non_empty x)
  Exists.elim second
  (
    fun (w) =>
      fun (hw : w ‚àà { x } ‚àß ‚àÄ A ‚àà w; A ‚àâ {x}) =>
        let third := (Iff.mp (singleton_a_elem_is_a x w)) (And.left hw)
        let fourth : ‚àÄ A ‚àà x; A ‚àâ {x} := eq_subst (fun (B : Set) => ‚àÄ A ‚àà B; A ‚àâ {x}) w x third (And.right hw)

        fun (s : (x ‚àà x)) =>
          let fifth : x ‚àâ {x} := fourth x s

          fifth (x_in_singl_x x)
  )



theorem no_universal_set : ¬¨‚àÉ A, ‚àÄ x, x ‚àà A :=
  fun (h : ‚àÉ A, ‚àÄ x, x ‚àà A) =>
    Exists.elim h
    (
      fun (w) =>
        fun (hw : ‚àÄ x, x ‚àà w) =>
          let first : ‚àÉ A, ‚àÄ x, (x ‚àà A) ‚Üî (x ‚àâ x) :=
            Exists.intro w (fun (x) => Iff.intro (fun (_ : x ‚àà w) => neg_notin_refl x) (fun (_ : x ‚àâ x) => hw x))
          Russel_paradox first
    )



theorem left_unordered_pair : ‚àÄ a‚ÇÅ a‚ÇÇ, a‚ÇÅ ‚àà {a‚ÇÅ, a‚ÇÇ} :=
  fun (a‚ÇÅ) => fun (a‚ÇÇ) =>
    Iff.mpr (unordered_pair_set_is_unordered_pair a‚ÇÅ a‚ÇÇ a‚ÇÅ) ((Or.inl : a‚ÇÅ = a‚ÇÅ ‚Üí a‚ÇÅ = a‚ÇÅ ‚à® a‚ÇÅ = a‚ÇÇ) (Eq.refl a‚ÇÅ))


theorem right_unordered_pair : ‚àÄ a‚ÇÅ a‚ÇÇ, a‚ÇÇ ‚àà {a‚ÇÅ, a‚ÇÇ} :=
  fun (a‚ÇÅ) => fun (a‚ÇÇ) =>
    Iff.mpr (unordered_pair_set_is_unordered_pair a‚ÇÅ a‚ÇÇ a‚ÇÇ) ((Or.inr : a‚ÇÇ = a‚ÇÇ ‚Üí a‚ÇÇ = a‚ÇÅ ‚à® a‚ÇÇ = a‚ÇÇ) (Eq.refl a‚ÇÇ))




theorem unordered_pair_is_unordered : ‚àÄ a‚ÇÅ a‚ÇÇ, {a‚ÇÅ, a‚ÇÇ} = {a‚ÇÇ, a‚ÇÅ} :=
  fun (a‚ÇÅ) => fun (a‚ÇÇ) =>
    extensionality {a‚ÇÅ, a‚ÇÇ} {a‚ÇÇ, a‚ÇÅ} (
      fun (x) =>
      Iff.intro
      (
        fun (h : (x ‚àà {a‚ÇÅ, a‚ÇÇ})) =>
          let first := (Iff.mp ((unordered_pair_set_is_unordered_pair a‚ÇÅ a‚ÇÇ) x)) h

          let second := Iff.mp (disj_comm (x = a‚ÇÅ) (x = a‚ÇÇ))

          let third := second first

          let fourth := (Iff.mpr ((unordered_pair_set_is_unordered_pair a‚ÇÇ a‚ÇÅ) x))

          let fifth := fourth third

          fifth

      )
      (
        fun (h : (x ‚àà {a‚ÇÇ, a‚ÇÅ})) =>
          let first := (Iff.mp ((unordered_pair_set_is_unordered_pair a‚ÇÇ a‚ÇÅ) x)) h

          let second := Iff.mp (disj_comm (x = a‚ÇÇ) (x = a‚ÇÅ))

          let third := second first

          let fourth := (Iff.mpr ((unordered_pair_set_is_unordered_pair a‚ÇÅ a‚ÇÇ) x))

          let fifth := fourth third

          fifth
      )
    )


theorem unordered_pair_subs : ‚àÄ a‚ÇÅ a‚ÇÇ A, (a‚ÇÅ ‚àà A) ‚Üí (a‚ÇÇ ‚àà A) ‚Üí ({a‚ÇÅ, a‚ÇÇ} ‚äÜ A) :=
  fun (a‚ÇÅ a‚ÇÇ A ha‚ÇÅ ha‚ÇÇ) =>
    fun (x hx) =>
      Or.elim (Iff.mp (unordered_pair_set_is_unordered_pair a‚ÇÅ a‚ÇÇ x) hx)
      (
        fun (hxa‚ÇÅ) =>
          eq_subst (fun (t) => t ‚àà A) a‚ÇÅ x (Eq.symm hxa‚ÇÅ) (ha‚ÇÅ)
      )
      (
        fun (hxa‚ÇÇ) =>
          eq_subst (fun (t) => t ‚àà A) a‚ÇÇ x (Eq.symm hxa‚ÇÇ) (ha‚ÇÇ)
      )

theorem singl_subs : ‚àÄ x A, (x ‚àà A) ‚Üí {x} ‚äÜ A :=
  fun (x A hx) =>
    unordered_pair_subs x x A (hx) (hx)

theorem unique_union : ‚àÄ A, ‚àÉ! B, ‚àÄ x, (x ‚àà B ‚Üî ‚àÉ y ‚àà A; x ‚àà y) :=
  fun (A) =>
    Exists.elim (union A)
    (
      fun (w) =>
        fun (hw : ‚àÄ x, (x ‚àà w ‚Üî ‚àÉ y ‚àà A; x ‚àà y)) =>
          Exists.intro w (And.intro hw (fun (s) =>
            fun (hs : ‚àÄ x, (x ‚àà s ‚Üî ‚àÉ y ‚àà A; x ‚àà y)) =>
              extensionality w s (fun (x) => iff_trans_symm (x ‚àà w) (‚àÉ y ‚àà A; x ‚àà y) (x ‚àà s) (hw x) (hs x))
          ))
    )



noncomputable def union_set : (Set ‚Üí Set) := fun (A) => set_intro (fun (B) => ‚àÄ x, (x ‚àà B ‚Üî ‚àÉ y ‚àà A; x ‚àà y)) (unique_union A)


notation (priority := high) "‚ãÉ" => union_set


theorem union_set_is_union : (‚àÄ A x, (x ‚àà ‚ãÉ A ‚Üî ‚àÉ y ‚àà A; x ‚àà y)) :=
  fun (A) =>
    And.left (set_intro_prop (fun (B : Set) => ‚àÄ x, (x ‚àà B ‚Üî ‚àÉ y ‚àà A; x ‚àà y)) (unique_union A))



theorem union_empty : ‚ãÉ ‚àÖ = ‚àÖ :=
    Iff.mp (subs_subs_eq (‚ãÉ ‚àÖ) ‚àÖ) (And.intro (
      fun (x) =>
        fun (g : x ‚àà (‚ãÉ ‚àÖ)) =>
          let first := Iff.mp (union_set_is_union ‚àÖ x) g
          Exists.elim first
          (
            fun (y) =>
              fun (hy : y ‚àà ‚àÖ ‚àß x ‚àà y) =>
                False.elim (empty_set_is_empty y (And.left hy))
          )
    ) (empty_set_subset_any (‚ãÉ ‚àÖ)))


theorem union_singleton : ‚àÄ A, ‚ãÉ {A} = A :=
  fun (A) =>
    extensionality (‚ãÉ {A}) A
    (
      fun (x) =>
        Iff.intro
        (
          fun (g : x ‚àà ‚ãÉ {A}) =>
            Exists.elim ((Iff.mp (union_set_is_union {A} x)) g)
            (
              fun w =>
                fun (hw : w ‚àà {A} ‚àß x ‚àà w) =>
                  let first := (Iff.mp (singleton_a_elem_is_a A w)) (And.left hw)
                  Eq.subst (first) (And.right hw)
            )
        )
        (
          fun (g : x ‚àà A) =>
            let first := x_in_singl_x A
            let second : ‚àÉ y ‚àà {A}; x ‚àà y := Exists.intro A (And.intro first g)

            let third := Iff.mpr (union_set_is_union {A} x)

            let fourth := third second

            fourth
        )
    )


theorem union_boolean : (‚àÄ A, ‚ãÉ (ùí´ A) = A) :=
  fun (A) =>
    extensionality (‚ãÉ (ùí´ A)) (A)
    (
      fun (x) =>
        Iff.intro
        (
          fun (g : x ‚àà ‚ãÉ (ùí´ A)) =>
            let first := Iff.mp (union_set_is_union (ùí´ A) x) g
            Exists.elim first
            (
              fun (w) => fun (hw : w ‚àà ùí´ A ‚àß x ‚àà w) =>
                let second := And.left hw
                let third := Iff.mp (boolean_set_is_boolean A w) second x (And.right hw)
                third

            )
        )
        (
          fun (g : x ‚àà A) =>
            let first := subset_refl A
            let second := Iff.mpr (boolean_set_is_boolean A A) first
            let third : ‚àÉ y ‚àà (ùí´ A); x ‚àà y := Exists.intro A (And.intro (second) (g))
            let fourth := Iff.mpr (union_set_is_union (ùí´ A) x) third
            fourth
        )
    )


theorem elem_subset_union : (‚àÄ A, ‚àÄ x ‚àà A; x ‚äÜ ‚ãÉ A) :=
  fun (A) => fun (x) => fun (g : (x ‚àà A)) =>
    fun (s) => fun (h : s ‚àà x) =>
    let first := And.intro g h
    let second : ‚àÉ x ‚àà A; s ‚àà x := Exists.intro x first
    let third := Iff.mpr (union_set_is_union A s) second
    third




theorem boolean_union : (‚àÄ A, A ‚äÜ ùí´ (‚ãÉ A)) :=
  fun (A) =>
    fun (x) =>
      fun (g : x ‚àà A) =>
        let first := (Iff.mpr (boolean_set_is_boolean (‚ãÉ A) x))
        let second := first (elem_subset_union A x g)
        second



theorem sub_bool_un_mem_bool : ‚àÄ A B, (A ‚äÜ ùí´ B ‚Üí ((‚ãÉ A) ‚àà ùí´ B)) :=
  fun (A B) =>
    fun (hAB : A ‚äÜ ùí´ B) =>
      Iff.mpr (boolean_set_is_boolean B (‚ãÉ A)) (
        fun (m) =>
          fun (hm : m ‚àà ‚ãÉ A) =>
            let u := Iff.mp (union_set_is_union A m) hm
            Exists.elim u (
              fun (x) =>
                fun (hx : x ‚àà A ‚àß m ‚àà x) =>
                  let v := hAB x (And.left hx)
                  Iff.mp (boolean_set_is_boolean B x) v m (And.right hx)
            )
      )






theorem specification_simple (P : Set ‚Üí Prop) :  (‚àÄ A, (¬¨‚àÉ x ‚àà A; P x) ‚Üí ‚àÉ B, ‚àÄ x, (x ‚àà B ‚Üî x ‚àà A ‚àß P x)) :=
    fun (A) =>
      fun (h : ¬¨‚àÉ x ‚àà A; P x) =>
      Exists.intro ‚àÖ (fun (x) =>
        Iff.intro
        (
          fun (g : x ‚àà ‚àÖ) =>
          (False.elim : False ‚Üí x ‚àà A ‚àß P x)
          (empty_set_is_empty x g)
        )
        (
          fun (g : x ‚àà A ‚àß P x) =>
            let first : ‚àÉ x ‚àà A; P x := Exists.intro x g

            (False.elim : False ‚Üí x ‚àà ‚àÖ) (h first)
        )
      )


def functional_predicate_selector (P : Set ‚Üí Prop) (e : Set)  : Set ‚Üí Set ‚Üí Prop :=
  fun (b : Set) => fun (c : Set) => (P b ‚Üí c = b) ‚àß (¬¨P b ‚Üí c = e)


def functional_func_pred_sel (A : Set) (P : Set ‚Üí Prop) (e : Set) : functional_predicate A (functional_predicate_selector P e) :=
  fun (x) =>
    fun (_ : x ‚àà A) =>
      Or.elim (Classical.em (P x))
      (fun (g‚ÇÅ : P x) =>
        Exists.intro x (And.intro (And.intro (fun (_ : P x) => Eq.refl x) (fun (s : ¬¨P x) => (False.elim : False ‚Üí x = e) (s g‚ÇÅ))) (
          fun (y) => fun (hy : (P x ‚Üí y = x) ‚àß (¬¨P x ‚Üí y = e)) =>
            Eq.symm (And.left hy g‚ÇÅ)
        ))
      )
      (
        fun (g‚ÇÅ : ¬¨P x) =>
        Exists.intro e (And.intro (And.intro (fun (s : P x) => (False.elim : False ‚Üí e = x) (g‚ÇÅ s)) (fun (_ : ¬¨P x) => Eq.refl e)) (
          fun (y) => fun (hy : (P x ‚Üí y = x) ‚àß (¬¨ P x ‚Üí y = e)) =>
            Eq.symm (And.right hy g‚ÇÅ)
        ))
      )





theorem specification_hard (P : Set ‚Üí Prop) : (‚àÄ A, (‚àÉ x ‚àà A; P x) ‚Üí ‚àÉ B, ‚àÄ x, (x ‚àà B ‚Üî x ‚àà A ‚àß P x)) :=
  fun (A) =>
    fun (h : ‚àÉ x ‚àà A; P x) =>
      Exists.elim h
      (
        fun (e) =>
          fun (e_property : e ‚àà A ‚àß P e) =>
        (
          let selector := functional_predicate_selector P e
          let selector_us_functional := functional_func_pred_sel A P e
          let first := replacement selector A selector_us_functional
          Exists.elim first
          (
            fun (w) =>
              fun (hw : ‚àÄ y, (y ‚àà w ‚Üî ‚àÉ t ‚àà A; (P t ‚Üí y = t) ‚àß (¬¨ P t ‚Üí y = e))) =>
                Exists.intro w
                (
                  fun (x) =>
                  Iff.intro
                  (
                    fun (s : x ‚àà w) =>
                      let second := (Iff.mp (hw x)) s
                      Exists.elim second
                      (
                        fun (u) =>
                          fun (hu : u ‚àà A ‚àß (P u ‚Üí x = u) ‚àß (¬¨ P u ‚Üí x = e)) =>
                          Or.elim (Classical.em (P u))
                          (
                            fun (h‚ÇÅ : P u) =>
                              let third := (And.left (And.right hu) (h‚ÇÅ))
                              eq_subst (fun (elem) => elem ‚àà A ‚àß P elem) (u) (x) (Eq.symm third)
                              (And.intro (And.left hu) (h‚ÇÅ))
                          )
                          (
                            fun (h‚ÇÅ : ¬¨ P u) =>
                              let third := (And.right (And.right hu) (h‚ÇÅ))
                              eq_subst (fun (elem) => elem ‚àà A ‚àß P elem) (e) (x) (Eq.symm third)
                              (e_property)
                          )
                      )
                  )
                  (
                    fun (s : x ‚àà A ‚àß P x) =>
                      let second := (Iff.mpr (hw x))
                      let third := Exists.intro x (And.intro
                      (And.left s)
                      (And.intro
                      (fun (_ : P x) => Eq.refl x)
                      (fun (npx : ¬¨P x) => (False.elim : False ‚Üí x = e) (npx (And.right s))))
                      )
                      second third
                  )
                )
          )
        )
      )








theorem specification (P : Set ‚Üí Prop) : (‚àÄ A, ‚àÉ B, ‚àÄ x, (x ‚àà B ‚Üî x ‚àà A ‚àß P x)) :=
  fun (A) =>
    Or.elim (Classical.em (‚àÉ x ‚àà A; P x))
    (specification_hard P A)
    (specification_simple P A)


theorem unique_specification (P : Set ‚Üí Prop) : (‚àÄ A, ‚àÉ! B, ‚àÄ x, (x ‚àà B ‚Üî x ‚àà A ‚àß P x)) :=
  fun (A) =>
    Exists.elim (specification P A)
    (
      fun (w) =>
        fun (hw : ‚àÄ s, (s ‚àà w ‚Üî s ‚àà A ‚àß P s)) =>
          Exists.intro w (And.intro hw (fun (y) =>
            fun (hy : ‚àÄ s, (s ‚àà y ‚Üî s ‚àà A ‚àß P s)) =>
              extensionality w y (fun (x) => iff_trans_symm (x ‚àà w) (x ‚àà A ‚àß P x) (x ‚àà y) (hw x) (hy x))
          ))
    )



noncomputable def specification_set (P : Set ‚Üí Prop) : (Set ‚Üí Set) :=
  fun (A) => set_intro (fun (B) => (‚àÄ x, x ‚àà B ‚Üî x ‚àà A ‚àß P x)) (unique_specification P A)





syntax "{" ident "‚àà" term "|" term "}" : term



macro_rules
  | `({ $x:ident ‚àà $A:term | $property:term })  => `(specification_set (fun ($x) => $property) $A)


theorem spec_is_spec (P : Set ‚Üí Prop) : (‚àÄ A x, x ‚àà {x ‚àà A | P x} ‚Üî x ‚àà A ‚àß P x) :=
  fun (A) =>
    And.left (set_intro_prop (fun (B) => ‚àÄ x, x ‚àà B ‚Üî x ‚àà A ‚àß P x) (unique_specification P A))


theorem specification_set_subset (P : Set ‚Üí Prop) : (‚àÄ A, {x ‚àà A | P x} ‚äÜ A) :=
  fun (A) => fun(t) => fun (g : (t ‚àà {x ‚àà A | P x})) =>
    And.left ((Iff.mp (spec_is_spec P A t)) g)


def is_collective (P : Set ‚Üí Prop) := ‚àÉ A, ‚àÄ x, (P x) ‚Üí x ‚àà A
def is_comprehense (P : Set ‚Üí Prop) (X : Set) := (is_collective P ‚àß ‚àÄ x, (x ‚àà X ‚Üî P x)) ‚à® (¬¨(is_collective P) ‚àß X = ‚àÖ)
theorem spec_unique (P : Set ‚Üí Prop) : ‚àÉ! X, is_comprehense P X :=
  Or.elim (Classical.em (is_collective P))
  (
    fun (hins) =>
      Exists.elim hins (
        fun (A hA) =>
          Exists.intro {x ‚àà A | P x} (
                let u‚ÇÅ := fun (x) => Iff.intro (
                    fun (hx) =>
                      And.right (Iff.mp (spec_is_spec P A x) hx)
                  ) (
                    fun (hx) =>
                      Iff.mpr (spec_is_spec P A x) (
                        And.intro (hA x hx) (hx)
                      )
                  )
            And.intro (Or.inl (
              And.intro (hins) (
                u‚ÇÅ
              )
            )) (
              fun (y hy) =>
                Or.elim hy
                (
                  fun (hinsP) =>
                    extensionality {x ‚àà A | P x} y (
                      fun (x) =>
                        Iff.intro
                        (
                          fun (hx) =>
                            let u‚ÇÇ := Iff.mp (u‚ÇÅ x) hx
                            Iff.mpr (And.right hinsP x) u‚ÇÇ
                        )
                        (
                          fun (hx) =>
                            Iff.mpr (u‚ÇÅ x) (
                              Iff.mp (And.right hinsP x) (hx)
                            )
                        )
                    )

                )
                (
                  fun (hninsemp) =>
                    False.elim ((And.left hninsemp) (hins))
                )
            )
          )
      )
  )
  (
    fun (hnins) =>
      Exists.intro ‚àÖ (
        And.intro (Or.inr (And.intro hnins (Eq.refl ‚àÖ))) (
          fun (y hy) =>
            Or.elim (hy)
            (
              fun (hinsP) =>
                False.elim (hnins (And.left hinsP))
            )
            (
              fun (hninsemp) =>
                Eq.symm (And.right hninsemp)
            )
        )
      )
  )




noncomputable def collect_compreh_set (P : Set ‚Üí Prop) := set_intro (fun (X) => is_comprehense P X) (spec_unique P)
syntax "{" ident "|" term "}" : term
macro_rules
  | `({ $x:ident | $property:term })  => `(collect_compreh_set (fun ($x) => $property))

theorem compr_is_compr (P : Set ‚Üí Prop) : is_collective P ‚Üí (‚àÄ x, (x ‚àà {x | P x} ‚Üî P x)) :=
  fun (hP) =>
    let u‚ÇÅ : is_comprehense P {x | P x} := And.left (set_intro_prop (fun (X) => is_comprehense P X) (spec_unique P))

    Or.elim u‚ÇÅ (
      fun (hinsP) =>
        And.right hinsP
    ) (
      fun (hninsP) =>
        False.elim ((And.left hninsP) (hP))
    )


noncomputable def intersection_set : Set ‚Üí Set := fun (A) => {x ‚àà ‚ãÉ A | ‚àÄ y ‚àà A; x ‚àà y}

notation (priority := high) "‚ãÇ" => intersection_set

theorem intersection_set_is_intersection : ‚àÄ A x, x ‚àà ‚ãÇ A ‚Üî (x ‚àà ‚ãÉ A ‚àß ‚àÄ y ‚àà A; x ‚àà y) :=
  fun (A) =>
    spec_is_spec (fun (x) => ‚àÄ y ‚àà A; x ‚àà y) (‚ãÉ A)


theorem intersection_sub_union : ‚àÄ A, (‚ãÇ A) ‚äÜ (‚ãÉ A) :=
  fun (A) =>
    specification_set_subset (fun (x) => ‚àÄ y ‚àà A; x ‚àà y) (‚ãÉ A)


theorem intersection_non_empty : ‚àÄ A, (A ‚â† ‚àÖ ‚Üí ‚àÄ x, (x ‚àà ‚ãÇ A) ‚Üî ‚àÄ y ‚àà A; x ‚àà y) :=
  fun (A) => fun (h : A ‚â† ‚àÖ) =>
    fun (x) =>
      Iff.intro
      (
        fun (g :x ‚àà ‚ãÇ A) => And.right ((Iff.mp (intersection_set_is_intersection A x)) g)
      )
      (
        fun (g : ‚àÄ y ‚àà A; x ‚àà y) =>
          let first := non_empty_uni_then_exi (fun (t) => x ‚àà t) A h g
          let second := Iff.mpr (union_set_is_union A x) first
          let fourth := And.intro second g
          let fifth := Iff.mpr (intersection_set_is_intersection A x) fourth
          fifth
      )



theorem union_subset_monotonic : ‚àÄ A B, A ‚äÜ B ‚Üí ‚ãÉ A ‚äÜ ‚ãÉ B :=
  fun (A) => fun (B) => fun (h : A ‚äÜ B) =>
    fun (x) => fun (g : x ‚àà ‚ãÉ A) =>
      let first := Iff.mp (union_set_is_union A x) g
      Exists.elim first
      (
        fun (w) =>
          fun (hw : w ‚àà A ‚àß x ‚àà w) =>
          let second := And.intro (h w (And.left hw)) (And.right hw)
          let third : ‚àÉ y ‚àà B; x ‚àà y := Exists.intro w second
          let fourth := Iff.mpr (union_set_is_union B x)
          fourth third
      )


theorem intersect_subset_monotonic : ‚àÄ A B, (A ‚â† ‚àÖ) ‚Üí (A ‚äÜ B) ‚Üí (‚ãÇ B ‚äÜ ‚ãÇ A) :=
  fun (A) => fun (B) => fun (g : A ‚â† ‚àÖ) => fun (h : A ‚äÜ B) =>
    fun (x) => fun (s : x ‚àà ‚ãÇ B) =>
      let first : B ‚â† ‚àÖ := fun (h‚ÇÅ : B = ‚àÖ) =>
        let second := (And.intro (Eq.subst h‚ÇÅ h)) (empty_set_subset_any A)
        let third := (Iff.mp (subs_subs_eq A ‚àÖ))
        let fourth := third second
        g fourth
      let fifth: ‚àÄ t ‚àà B; x ‚àà t := (Iff.mp (intersection_non_empty B first x)) s
      let sixth: ‚àÄ t ‚àà A; x ‚àà t := fun (t) => fun (r : t ‚àà A) => fifth t (h t r)
      let seventh := (Iff.mpr (intersection_non_empty A g x)) sixth
      seventh



theorem all_ss_then_union_ss : ‚àÄ A B, (‚àÄ X ‚àà A; X ‚äÜ B) ‚Üí (‚ãÉ A ‚äÜ B) :=
  fun (A B) => fun (h‚ÇÅ : ‚àÄ X ‚àà A; X ‚äÜ B) =>
    fun (x) => fun (h‚ÇÇ : x ‚àà (‚ãÉ A)) => Exists.elim (Iff.mp (union_set_is_union A x) (h‚ÇÇ)) (
      fun (w) =>
        fun (hw : w ‚àà A ‚àß x ‚àà w) =>
          h‚ÇÅ w (And.left hw) x (And.right hw)
    )



noncomputable def singlbool_set (A) := {S ‚àà ùí´ (A) | ‚àÉ x ‚àà A; S = {x}}
syntax "ùí´‚ÇÅ" term : term
macro_rules
| `(ùí´‚ÇÅ $A) => `(singlbool_set $A)

theorem singlbool_set_prop : ‚àÄ A S, (S ‚àà ùí´‚ÇÅ (A)) ‚Üî (‚àÉ x ‚àà A; S = {x}) :=
  fun (A S) =>
    let P := fun (S) => (‚àÉ x ‚àà A; S = {x})
    Iff.intro
    (
      fun (hS) =>
        And.right (Iff.mp (spec_is_spec P (ùí´ A) S) (hS))
    )
    (
      fun (hS) =>
        Exists.elim hS (
          fun (x) =>
            fun (hx) =>
              let u‚ÇÅ := eq_subst (fun (t) => t ‚äÜ A) {x} S (Eq.symm (And.right hx)) (
                fun (s) =>
                  fun (hs) =>
                    let u‚ÇÇ := Iff.mp (singleton_a_elem_is_a x s) hs
                    eq_subst (fun (t) => t ‚àà A) x s (Eq.symm u‚ÇÇ) (And.left hx)
              )
              Iff.mpr (spec_is_spec P (ùí´ A) S) (
              And.intro (Iff.mpr (boolean_set_is_boolean A S) (
                u‚ÇÅ
              )) (hS)

              )
        )

    )


theorem in_singlbool_set : ‚àÄ A x, ({x} ‚àà ùí´‚ÇÅ (A)) ‚Üî (x ‚àà A) :=
  fun (A x) =>
    Iff.intro
    (
      fun (hx) =>
        let u‚ÇÅ := Iff.mp (singlbool_set_prop A {x}) hx
        Exists.elim u‚ÇÅ (
          fun (y) =>
            fun (hy) =>
              eq_subst (fun (t) => t ‚àà A) y x (
                Eq.symm (Iff.mp (singleton_a_elem_is_a y x) (
                  eq_subst (fun (t) => x ‚àà t) {x} {y} (And.right hy) (x_in_singl_x x)
                ))
              ) (And.left hy)
        )
    )
    (
      fun (hx) =>
        Iff.mpr (singlbool_set_prop A {x}) (
          Exists.intro x (And.intro (hx) (Eq.refl {x}))
        )
    )
